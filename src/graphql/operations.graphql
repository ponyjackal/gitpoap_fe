query getAllStats {
  totalContributors
  lastMonthContributors
  totalClaims
  lastMonthClaims
  totalRepos
  lastMonthRepos
}

query leaders($count: Float!) {
  mostHonoredContributors(count: $count) {
    profile {
      id
      address {
        ethAddress
        ensAvatarImageUrl
        ensName
      }
    }
    claimsCount
  }
}

query repoLeaders($repoId: Float!, $page: Float, $perPage: Float) {
  repoMostHonoredContributors(repoId: $repoId, page: $page, perPage: $perPage) {
    profile {
      id
      address {
        ethAddress
        ensAvatarImageUrl
        ensName
      }
    }
    claimsCount
  }
}

query gitpoapByPoapEventId($poapEventId: Int!) {
  gitPOAP(where: { poapEventId: $poapEventId }) {
    id
    poapEventId
    poapApprovalStatus
    project {
      repos {
        name
      }
    }
  }
}

query gitPOAPHolders($gitPOAPId: Float!, $page: Float, $perPage: Float, $sort: String) {
  gitPOAPHolders(gitPOAPId: $gitPOAPId, page: $page, perPage: $perPage, sort: $sort) {
    totalHolders
    holders {
      address
      githubHandle
      gitPOAPCount
      profileId
      bio
      personalSiteUrl
      twitterHandle
      ensAvatarImageUrl
      ensName
    }
  }
}

query mostClaimedGitPoaps($count: Float!) {
  mostClaimedGitPOAPs(count: $count) {
    claimsCount
    gitPOAP {
      id
      project {
        repos {
          name
          organization {
            name
          }
        }
      }
    }
    event {
      name
      image_url
    }
  }
}

query profile($address: String!) {
  profileData(address: $address) {
    id
    bio
    name
    githubHandle
    twitterHandle
    personalSiteUrl
    address
    ensName
    isVisibleOnLeaderboard
    ensAvatarImageUrl
    ensName
  }
}

query searchForString($text: String!) {
  search(text: $text) {
    profiles {
      id
      address {
        ethAddress
        ensAvatarImageUrl
        ensName
      }
    }
  }
}

query gitPoaps($address: String!, $sort: String, $page: Float, $perPage: Float) {
  userPOAPs(address: $address, sort: $sort, page: $page, perPage: $perPage) {
    totalGitPOAPs
    gitPOAPs {
      claim {
        pullRequestEarned {
          id
          repo {
            name
            organization {
              name
            }
          }
        }
        gitPOAP {
          id
        }
        status
        poapTokenId
      }
      event {
        name
        image_url
        description
      }
      contributionCount
    }
  }
}

query repoGitPoaps($repoId: Float!, $sort: String, $page: Float, $perPage: Float) {
  repoGitPOAPs(repoId: $repoId, sort: $sort, page: $page, perPage: $perPage) {
    totalGitPOAPs
    gitPOAPs {
      gitPOAP {
        id
        project {
          repos {
            name
          }
        }
      }
      event {
        name
        image_url
        description
      }
    }
  }
}

query openClaims($address: String!) {
  userClaims(address: $address) {
    claim {
      id
      pullRequestEarned {
        repo {
          name
          organization {
            name
          }
        }
      }
      status
      gitPOAP {
        id
      }
    }
    event {
      name
      image_url
      description
    }
  }
}

query recentRepos($count: Float!) {
  recentlyAddedRepos(count: $count) {
    id
    name
    createdAt
    organization {
      name
    }
  }
}

query gitPoapEvent($id: Float!) {
  gitPOAPEvent(id: $id) {
    gitPOAP {
      id
      creatorAddress {
        ethAddress
      }
      project {
        repos {
          id
          name
          organization {
            id
            name
          }
        }
      }
    }
    event {
      name
      image_url
      description
    }
  }
}

query allPoaps($address: String!, $sort: String, $page: Float, $perPage: Float) {
  userPOAPs(address: $address, sort: $sort, page: $page, perPage: $perPage) {
    totalPOAPs
    poaps {
      event {
        id
        name
        image_url
      }
      tokenId
    }
  }
}

query featuredPoaps($address: String!) {
  profileFeaturedPOAPs(address: $address) {
    gitPOAPs {
      claim {
        id
        pullRequestEarned {
          id
          repo {
            name
            organization {
              name
            }
          }
        }
        gitPOAP {
          id
        }
      }
      poap {
        event {
          id
          image_url
          name
          description
        }
        tokenId
      }
    }
    poaps {
      event {
        id
        name
        description
        image_url
      }
      tokenId
    }
  }
}

query adminClaims($count: Int!) {
  claims(take: $count, orderBy: { mintedAt: desc }, where: { status: { equals: CLAIMED } }) {
    id
    githubUser {
      id
      githubHandle
    }
    status
    poapTokenId
    mintedAddress {
      ethAddress
    }
    updatedAt
    createdAt
    mintedAt
    pullRequestEarned {
      githubPullNumber
      repo {
        id
        name
        organization {
          id
          name
        }
      }
    }
    gitPOAP {
      id
      name
      year
      imageUrl
    }
  }
}

query eligibleClaims($query: String!, $skip: Int, $take: Int) {
  claims(
    take: $take
    skip: $skip
    where: {
      mintedAddressId: { equals: null }
      gitPOAP: {
        is: { isEnabled: { equals: true }, NOT: { poapApprovalStatus: { equals: UNAPPROVED } } }
      }
      OR: [
        { githubUser: { is: { githubHandle: { contains: $query, mode: insensitive } } } }
        { issuedAddress: { is: { ethAddress: { contains: $query, mode: insensitive } } } }
        { issuedAddress: { is: { ensName: { contains: $query, mode: insensitive } } } }
        { gitPOAP: { is: { name: { contains: $query, mode: insensitive } } } }
        { gitPOAP: { is: { description: { contains: $query, mode: insensitive } } } }
      ]
    }
  ) {
    id
    issuedAddress {
      ethAddress
      ensName
    }
    githubUser {
      githubHandle
    }
    gitPOAP {
      id
      name
      description
      imageUrl
      project {
        repos(take: 1) {
          name
          organization {
            name
          }
        }
      }
    }
  }
}

query repoData($repoId: Float!) {
  repoData(repoId: $repoId) {
    id
    name
    githubRepoId
    organization {
      id
      name
    }
    project {
      gitPOAPs {
        id
        imageUrl
        name
      }
    }
    contributorCount
    mintedGitPOAPCount
    gitPOAPCount
  }
  repoStarCount(repoId: $repoId)
}

query repoSEOById($repoId: Float!) {
  repoData(repoId: $repoId) {
    id
    name
    organization {
      name
    }
  }
}

query repoSEOByName($orgName: String!, $repoName: String!) {
  repoData(orgName: $orgName, repoName: $repoName) {
    id
    name
    organization {
      name
    }
  }
}

query repoStarCount($repoId: Float!) {
  repoStarCount(repoId: $repoId)
}

query allRepos($count: Int!) {
  repos(take: $count, orderBy: { createdAt: desc }) {
    id
    name
    organization {
      name
    }
    createdAt
    project {
      gitPOAPs {
        id
      }
    }
  }
}

# Query primarily used on the Repos page
query allReposOnRepoPage($sort: String, $page: Float, $perPage: Float) {
  allRepos(sort: $sort, page: $page, perPage: $perPage) {
    id
    name
    githubRepoId
    organization {
      name
    }
    project {
      gitPOAPs {
        id
      }
    }
  }
}

query repoSearchOnRepoPage($take: Int, $search: String) {
  repos(
    take: $take
    where: {
      OR: [
        { name: { contains: $search, mode: insensitive } }
        { organization: { is: { name: { contains: $search, mode: insensitive } } } }
      ]
    }
  ) {
    id
    name
    githubRepoId
    organization {
      name
    }
    project {
      gitPOAPs {
        id
      }
    }
  }
}

query organizationData($orgId: Float!) {
  organizationData(orgId: $orgId) {
    id
    name
    contributorCount
    gitPOAPCount
    mintedGitPOAPCount
    repoCount
  }
}

query organizationSEOById($orgId: Float!) {
  organizationData(orgId: $orgId) {
    id
    name
  }
}

query organizationSEOByName($orgName: String!) {
  organizationData(orgName: $orgName) {
    id
    name
  }
}

query organizationsList($sort: String, $search: String, $page: Float, $perPage: Float) {
  allOrganizations(sort: $sort, page: $page, perPage: $perPage, search: $search) {
    id
    name
    githubOrgId
    repos {
      id
      project {
        gitPOAPs {
          id
        }
      }
    }
  }
}

query organizationRepos($orgId: Float!, $sort: String, $page: Float, $perPage: Float) {
  organizationRepos(orgId: $orgId, sort: $sort, page: $page, perPage: $perPage) {
    id
    name
    contributorCount
    mintedGitPOAPCount
    organization {
      name
    }
  }
}

query totalRepoCount {
  aggregateRepo {
    _count {
      id
    }
  }
}

query totalOrganizationCount($search: String) {
  aggregateGithubOrganization(where: { name: { contains: $search, mode: insensitive } }) {
    _count {
      id
    }
  }
}

query totalGitPOAPCount {
  aggregateGitPOAP {
    _count {
      id
    }
  }
}

query totalAnnualGitPOAPCount {
  aggregateGitPOAP(where: { type: { equals: ANNUAL } }) {
    _count {
      id
    }
  }
}

query totalCustomGitPOAPCount {
  aggregateGitPOAP(where: { type: { equals: CUSTOM } }) {
    _count {
      id
    }
  }
}

query claimsSince($date: DateTime) {
  claims(where: { status: { equals: CLAIMED }, mintedAt: { gt: $date } }) {
    id
  }
}

query reposSince($date: DateTime) {
  repos(where: { createdAt: { gt: $date } }) {
    id
  }
}

query gitPOAPsSince($date: DateTime) {
  gitPOAPS(where: { createdAt: { gt: $date } }) {
    id
  }
}

query profilesSince($date: DateTime) {
  profiles(where: { createdAt: { gt: $date } }) {
    id
  }
}

query orgsSince($date: DateTime) {
  githubOrganizations(where: { createdAt: { gt: $date } }) {
    id
  }
}

query claimsCount {
  aggregateClaim {
    _count {
      id
    }
  }
}

query claimsWithGithubHandleCount {
  aggregateClaim(where: { githubUserId: { not: { equals: null } } }) {
    _count {
      id
    }
  }
}

query claimsWithEmailCount {
  aggregateClaim(where: { emailId: { not: { equals: null } } }) {
    _count {
      id
    }
  }
}

query claimsWithIssuedAddressCount {
  aggregateClaim(where: { issuedAddressId: { not: { equals: null } } }) {
    _count {
      id
    }
  }
}

query totalAddresses {
  aggregateAddress {
    _count {
      id
    }
  }
}

query totalAddressesWithEnsNames {
  aggregateAddress(where: { ensName: { not: { equals: null } } }) {
    _count {
      id
    }
  }
}

query totalAddressesWithEnsAvatars {
  aggregateAddress(where: { ensAvatarImageUrl: { not: { equals: null } } }) {
    _count {
      id
    }
  }
}

query totalEmails {
  aggregateEmail {
    _count {
      id
    }
  }
}

query totalEmailsValidated {
  aggregateEmail(where: { isValidated: { equals: true } }) {
    _count {
      id
    }
  }
}

query totalUsers {
  aggregateGithubUser {
    _count {
      githubHandle
    }
  }
}

query totalProfiles {
  aggregateProfile {
    _count {
      id
    }
  }
}

query totalProfilesWithGitHubHandle {
  aggregateProfile(where: { githubHandle: { not: { equals: "" } } }) {
    _count {
      id
    }
  }
}

query totalProfilesHidden {
  aggregateProfile(where: { isVisibleOnLeaderboard: { equals: false } }) {
    _count {
      id
    }
  }
}

query totalAddressesWithClaims {
  claims(where: { status: { equals: CLAIMED }, issuedAddressId: { not: { equals: null } } }) {
    id
  }
}

query totalDistinctUsersWithClaims {
  claims(distinct: githubUserId, where: { status: { equals: CLAIMED } }) {
    id
  }
}

query totalEmailsWithClaims {
  claims(where: { status: { equals: CLAIMED }, emailId: { not: { equals: null } } }) {
    id
  }
}

query mintedClaimsCount {
  aggregateClaim(where: { status: { equals: CLAIMED } }) {
    _count {
      id
    }
  }
}

query unverifiedClaimsCount {
  aggregateClaim(where: { needsRevalidation: { equals: true } }) {
    _count {
      id
    }
  }
}

query allGitPOAPIds {
  gitPOAPS {
    id
  }
}

query reposGetStaticPaths {
  repos {
    id
    name
    organization {
      name
    }
  }
}

query orgsGetStaticPaths {
  githubOrganizations {
    id
    name
  }
}

query countClaimsWithPullRequestEarned {
  aggregateClaim(where: { pullRequestEarned: { isNot: null } }) {
    _count {
      id
    }
  }
}

# For the search bar
query repoSearchByName($search: String!, $take: Int = 4) {
  repos(
    take: $take
    where: { name: { contains: $search, mode: insensitive } }
    orderBy: { lastPRUpdatedAt: desc }
  ) {
    id
    name
    githubRepoId
    organization {
      name
    }
    project {
      id
      gitPOAPs(take: 1, where: { isEnabled: { equals: true } }) {
        id
        name
        description
        imageUrl
      }
    }
  }
}

# For the search bar
query orgSearchByName($search: String!, $take: Int = 4) {
  githubOrganizations(take: $take, where: { name: { contains: $search, mode: insensitive } }) {
    id
    name
    githubOrgId
    repos(orderBy: { lastPRUpdatedAt: desc }) {
      id
      name
      lastPRUpdatedAt
      project {
        gitPOAPs(take: 1, where: { isEnabled: { equals: true } }) {
          id
          name
          description
          imageUrl
        }
      }
    }
  }
}

# For the search bar
query gitPOAPSearchByName($search: String!, $take: Int = 4) {
  gitPOAPS(
    take: $take
    where: { name: { contains: $search, mode: insensitive }, isEnabled: { equals: true } }
  ) {
    id
    name
    description
    imageUrl
    project {
      repos(take: 1) {
        name
        organization {
          name
        }
      }
    }
  }
}

query gitPOAPsWithClaimCount($skip: Int, $take: Int, $orderBy: [GitPOAPOrderByWithRelationInput!]) {
  gitPOAPS(skip: $skip, take: $take, orderBy: $orderBy) {
    id
    name
    description
    imageUrl
    _count {
      claims
    }
    project {
      id
      repos {
        name
        organization {
          name
        }
      }
    }
  }
}

query trendingRepos($count: Float!, $numDays: Float!) {
  trendingRepos(count: $count, numDays: $numDays) {
    id
    name
    githubRepoId
    organization {
      id
      name
    }
    project {
      gitPOAPs {
        id
        imageUrl
      }
    }
    contributorCount
    mintedGitPOAPCount
  }
}

query gitPOAPRequest($gitPOAPRequestId: Int!) {
  gitPOAPRequest(where: { id: $gitPOAPRequestId }) {
    name
    contributors
    description
    startDate
    endDate
    creatorEmail {
      emailAddress
    }
    imageUrl
    staffApprovalStatus
    address {
      ethAddress
    }
    gitPOAPId
  }
}

query gitPOAPRequests($take: Int, $skip: Int, $approvalStatus: StaffApprovalStatus, $search: Int) {
  gitPOAPRequests(
    take: $take
    skip: $skip
    # where clause that adds a search filter if its present, but omits it if it is undefined
    where: { staffApprovalStatus: { equals: $approvalStatus }, id: { equals: $search } }
    orderBy: { createdAt: desc }
  ) {
    id
    createdAt
    updatedAt
    name
    description
    imageUrl
    startDate
    endDate
    numRequestedCodes
    creatorEmail {
      emailAddress
    }
    contributors
    staffApprovalStatus
    address {
      ethAddress
      ensName
    }
    project {
      repos(take: 1) {
        id
        name

        organization {
          id
          name
        }
      }
    }
  }
}

query totalGitPOAPRequestsCount($approvalStatus: StaffApprovalStatus) {
  aggregateGitPOAPRequest(where: { staffApprovalStatus: { equals: $approvalStatus } }) {
    _count {
      id
    }
  }
}

query userGitPOAPRequests(
  $take: Int
  $skip: Int
  $approvalStatus: StaffApprovalStatus
  $address: String
  $search: String
) {
  gitPOAPRequests(
    take: $take
    skip: $skip
    where: {
      staffApprovalStatus: { equals: $approvalStatus }
      address: { is: { ethAddress: { equals: $address, mode: insensitive } } }
      OR: [
        { name: { contains: $search, mode: insensitive } }
        { description: { contains: $search, mode: insensitive } }
      ]
    }
    orderBy: { createdAt: desc }
  ) {
    id
    name
    description
    imageUrl
    startDate
    endDate
    numRequestedCodes
    createdAt
    creatorEmail {
      emailAddress
    }
    gitPOAP {
      id
    }
    contributors
    staffApprovalStatus
    project {
      repos(take: 1) {
        id
        name

        organization {
          id
          name
        }
      }
    }
  }
}

query totalUserGitPOAPRequestsCount($approvalStatus: StaffApprovalStatus, $address: String) {
  aggregateGitPOAPRequest(
    where: {
      staffApprovalStatus: { equals: $approvalStatus }
      address: { is: { ethAddress: { equals: $address, mode: insensitive } } }
    }
  ) {
    _count {
      id
    }
  }
}

query gitPOAPWithClaims(
  $id: Int
  $take: Int
  $skip: Int
  $orderBy: [ClaimOrderByWithRelationInput!]
  $search: String
) {
  gitPOAP(where: { id: $id }) {
    id
    name
    description
    imageUrl
    type
    _count {
      claims
    }
    creatorAddress {
      ethAddress
    }
    claims(
      take: $take
      skip: $skip
      orderBy: $orderBy
      where: {
        OR: [
          { mintedAddress: { is: { ethAddress: { contains: $search, mode: insensitive } } } }
          { mintedAddress: { is: { ensName: { contains: $search, mode: insensitive } } } }
          { issuedAddress: { is: { ensName: { contains: $search, mode: insensitive } } } }
          { issuedAddress: { is: { ensName: { contains: $search, mode: insensitive } } } }
          { email: { is: { emailAddress: { contains: $search, mode: insensitive } } } }
          { githubUser: { is: { githubHandle: { contains: $search, mode: insensitive } } } }
        ]
      }
    ) {
      id
      status
      mintedAt
      createdAt
      mintedAddress {
        ensName
        ethAddress
        ensAvatarImageUrl
      }
      githubUser {
        githubHandle
      }
      email {
        emailAddress
      }
      issuedAddress {
        ethAddress
        ensName
        ensAvatarImageUrl
      }
    }
    project {
      id
      repos {
        name
        organization {
          name
        }
      }
    }
  }
}

query teamData($teamId: Int!) {
  team(where: { id: $teamId }) {
    id
    name
    description
    logoImageUrl
  }
}

mutation updateTeam($teamId: Float!, $input: TeamUpdateInput!) {
  updateTeam(teamId: $teamId, input: $input) {
    name
    description
  }
}

query teamGitPOAPs($teamId: Float!, $approvalStatus: String, $sort: String) {
  teamGitPOAPs(teamId: $teamId, approvalStatus: $approvalStatus, sort: $sort) {
    id
    name
    description
    imageUrl
    createdAt
    poapApprovalStatus
    claims {
      id
    }
  }
}

query teamGitPOAPRequests($teamId: Float!, $approvalStatus: String, $sort: String) {
  teamGitPOAPRequests(teamId: $teamId, approvalStatus: $approvalStatus, sort: $sort) {
    id
    name
    description
    imageUrl
    createdAt
    staffApprovalStatus
    contributors
  }
}
